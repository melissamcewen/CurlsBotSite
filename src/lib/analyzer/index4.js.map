{"version":3,"file":"index4.js","sources":["../../../../src/utils/normalizer.ts"],"sourcesContent":["import type { NormalizedIngredientList } from '../types';\n\n/**\n * Checks if an individual ingredient is valid\n * @param value - The ingredient string to validate\n * @returns `true` if ingredient is valid, `false` otherwise\n */\nexport function isValidIngredient(value: string): boolean {\n  return value.trim().length > 0 && value.length <= 150;\n}\n\n/**\n * Checks if the input string is a valid ingredients list\n * @param value - The ingredient list string to validate\n * @returns `true` if list is valid, `false` if it contains URLs or is empty\n */\nexport function isValidIngredientList(value: string): boolean {\n  // Check for URLs\n  if (/(?:https?:\\/\\/|www\\.|\\/{2})/i.test(value)) {\n    return false;\n  }\n  return value.trim().length > 0;\n}\n\n\n/**\n * Normalizes an ingredient name for comparison\n */\nexport function normalizeIngredient(name: string): string {\n  return name\n    .toLowerCase()\n    .replace(/[()]/g, ' ') // Replace parentheses with spaces\n    .replace(/[^a-z0-9\\s\\-]/g, '') // Remove all non-alphanumeric characters except spaces and hyphens\n    .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n    .trim();\n}\n\n\n/**\n * Looks for comma seperated ingredient lists in parentheses and extracts them,\n * returns a single string with the combined ingredient list from the parentheses so we can add it to the main list\n * @param ingredient_list - The ingredient string to process\n * @returns Original string with any comma seperated lists in parentheses removed and added to the end of the string\n */\nexport function processCommaParentheses(ingredient_list: string): string {\n  const regex = /\\(([^()]*?)\\)/g; // Match non-nested parentheses\n  let result = ingredient_list;\n\n  let hasChanges = true;\n\n  // Process parentheses content iteratively to handle nested structures\n  while (hasChanges) {\n    hasChanges = false;\n    result = result.replace(regex, (_, content) => {\n      const trimmedContent = content.trim();\n\n      if (trimmedContent.includes(',')) {\n        hasChanges = true;\n        // Replace content with comma-separated items inside parentheses\n        return `, ${trimmedContent\n          .split(',')\n          .map((c) => c.trim())\n          .join(', ')}`;\n      }\n\n      if (trimmedContent === '') {\n        return '(  )'; // Preserve empty parentheses with spaces\n      }\n\n      return `(${content})`; // Return parentheses content unchanged\n    });\n  }\n\n  // Final cleanup for inner spaces **only inside parentheses**\n  result = result.replace(/,\\s*,/g, ','); // Remove unnecessary commas inside\n  result = result.replace(/,(\\s*\\))/g, '$1'); // Remove commas before closing parentheses\n\n  return result;\n}\n\n\n\n\n\n\n/**\n * Splits a string by commas, line breaks, pipes, ampersands, and the word \"and\", then cleans the resulting array\n * @param text - The text to split\n * @returns Array of cleaned strings\n */\nexport function splitBySeparators(text: string): string[] {\n  return text\n    .split(/(?:[,\\n\\r|&]|\\s+and\\s+)/) // Split by comma, newline, carriage return, pipe, ampersand, or \" and \"\n    .map(part => part.trim())\n    .filter(Boolean); // Remove empty strings\n}\n\n\n\n/**\n * Normalizes a cosmetic ingredients list string\n */\nexport function normalizer(text: string): NormalizedIngredientList {\n  if (!isValidIngredientList(text)) {\n    return { ingredients: [], isValid: false };\n  }\n  // first process the text to remove any commas in parentheses\n  const processedText = processCommaParentheses(text);\n  // then split the text by commas\n  const ingredients = splitBySeparators(processedText);\n\n  //remove any invalid ingredients\n  const validIngredients = ingredients.filter(isValidIngredient);\n\n  // then process each ingredient to remove any invalid characters and trim\n  const normalizedIngredients = validIngredients.map(ingredient => normalizeIngredient(ingredient));\n\n  return { ingredients: normalizedIngredients, isValid: true };\n}\n\n"],"names":["isValidIngredient","value","isValidIngredientList","normalizeIngredient","name","processCommaParentheses","ingredient_list","regex","result","hasChanges","_","content","trimmedContent","c","splitBySeparators","text","part","normalizer","processedText","ingredient"],"mappings":"AAOO,SAASA,EAAkBC,GAAwB;AACxD,SAAOA,EAAM,OAAO,SAAS,KAAKA,EAAM,UAAU;AACpD;AAOO,SAASC,EAAsBD,GAAwB;AAExD,SAAA,+BAA+B,KAAKA,CAAK,IACpC,KAEFA,EAAM,OAAO,SAAS;AAC/B;AAMO,SAASE,EAAoBC,GAAsB;AACxD,SAAOA,EACJ,YACA,EAAA,QAAQ,SAAS,GAAG,EACpB,QAAQ,kBAAkB,EAAE,EAC5B,QAAQ,QAAQ,GAAG,EACnB,KAAK;AACV;AASO,SAASC,EAAwBC,GAAiC;AACvE,QAAMC,IAAQ;AACd,MAAIC,IAASF,GAETG,IAAa;AAGjB,SAAOA;AACQ,IAAAA,IAAA,IACbD,IAASA,EAAO,QAAQD,GAAO,CAACG,GAAGC,MAAY;AACvC,YAAAC,IAAiBD,EAAQ,KAAK;AAEhC,aAAAC,EAAe,SAAS,GAAG,KAChBH,IAAA,IAEN,KAAKG,EACT,MAAM,GAAG,EACT,IAAI,CAACC,MAAMA,EAAE,KAAM,CAAA,EACnB,KAAK,IAAI,CAAC,MAGXD,MAAmB,KACd,SAGF,IAAID,CAAO;AAAA,IAAA,CACnB;AAIM,SAAAH,IAAAA,EAAO,QAAQ,UAAU,GAAG,GAC5BA,IAAAA,EAAO,QAAQ,aAAa,IAAI,GAElCA;AACT;AAYO,SAASM,EAAkBC,GAAwB;AACjD,SAAAA,EACJ,MAAM,yBAAyB,EAC/B,IAAI,CAAQC,MAAAA,EAAK,KAAK,CAAC,EACvB,OAAO,OAAO;AACnB;AAOO,SAASC,EAAWF,GAAwC;AAC7D,MAAA,CAACb,EAAsBa,CAAI;AAC7B,WAAO,EAAE,aAAa,IAAI,SAAS,GAAM;AAGrC,QAAAG,IAAgBb,EAAwBU,CAAI;AAUlD,SAAO,EAAE,aARWD,EAAkBI,CAAa,EAGd,OAAOlB,CAAiB,EAGd,IAAI,CAAcmB,MAAAhB,EAAoBgB,CAAU,CAAC,GAEnD,SAAS,GAAK;AAC7D;"}
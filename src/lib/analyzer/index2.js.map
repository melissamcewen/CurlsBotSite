{"version":3,"file":"index2.js","sources":["../../../../src/analyzer.ts"],"sourcesContent":["import type {\n  AnalyzerConfig,\n  IngredientDatabase,\n  AnalysisResult,\n  System,\n  Settings,\n  IngredientResult,\n  StatusReason,\n  Setting\n} from './types';\nimport { getBundledDatabase } from './data/bundledData';\nimport { getBundledSystems } from './data/bundledData';\nimport { getBundledSettings } from './data/bundledData';\nimport { normalizer } from './utils/normalizer';\nimport { findIngredient, findSystemById } from './utils/databaseUtils';\n\nexport class Analyzer {\n  private database: IngredientDatabase;\n  private system: System;\n  private settings: Settings;\n\n  constructor(config?: Partial<AnalyzerConfig>) {\n    this.database = config?.database ?? getBundledDatabase();\n    const bundledSystems = getBundledSystems();\n    const defaultSystem = findSystemById(bundledSystems, 'curly_default');\n    if (!defaultSystem) {\n      throw new Error('Could not find curly_default system');\n    }\n    this.system = config?.system ?? defaultSystem;\n    this.settings = config?.settings ?? getBundledSettings();\n  }\n\n  /**\n   * Gets the current database being used by the analyzer\n   */\n  getDatabase(): IngredientDatabase {\n    return this.database;\n  }\n\n  /**\n   * Updates the database being used by the analyzer\n   */\n  setDatabase(database: IngredientDatabase): void {\n    this.database = database;\n  }\n\n  /**\n   * Gets the current system\n   */\n  getSystem(): System {\n    return this.system;\n  }\n\n  /**\n   * Updates the current system\n   */\n  setSystem(system: System): void {\n    this.system = system;\n  }\n\n  /**\n   * Creates an empty analysis result\n   */\n  private createEmptyResult(input: string): AnalysisResult {\n    return {\n      input,\n      status: 'error',\n      reasons: [],\n      ingredients: []\n    };\n  }\n\n  /**\n   * Analyzes a single ingredient against the current system's settings\n   */\n  private analyzeIngredient(name: string, normalized: string): IngredientResult {\n    const result: IngredientResult = {\n      name,\n      normalized,\n      status: 'ok',\n      reasons: []\n    };\n\n    // Try to find the ingredient in the database\n    const match = findIngredient(this.database, normalized);\n    if (match?.ingredient) {\n      result.ingredient = {\n        id: match.ingredient.id,\n        name: match.ingredient.name,\n        description: match.ingredient.description\n      };\n    } else {\n      // Unknown ingredient gets a caution status\n      result.status = 'caution';\n      result.reasons.push({\n        setting: 'unknown_ingredient',\n        reason: 'Ingredient not found in database'\n      });\n      return result;\n    }\n\n    // Check each active setting\n    for (const settingId of this.system.settings) {\n      const setting = this.settings[settingId];\n      if (!setting) continue;\n\n      let matches = false;\n      let allowedMatch = false;\n\n      // Check if ingredient matches any categories\n      if (setting.categories) {\n        matches = match.ingredient.categories.some(cat => setting.categories?.includes(cat));\n      }\n\n      // Check if ingredient matches any groups via its categories\n      if (setting.groups) {\n        matches = matches || match.ingredient.categories.some(catId => {\n          const category = this.database.categories[catId];\n          return category && setting.groups?.includes(category.group);\n        });\n\n        // If it matches a group, check if it's in allowed categories\n        if (matches && setting.allowedCategories) {\n          allowedMatch = match.ingredient.categories.some(cat =>\n            setting.allowedCategories?.includes(cat)\n          );\n        }\n      }\n\n      // Check direct ingredient matches\n      if (setting.ingredients) {\n        matches = matches || setting.ingredients.includes(match.ingredient.id);\n      }\n\n      if (matches) {\n        // Add the reason\n        const status = allowedMatch ? setting.allowedStatus : setting.defaultStatus;\n        result.reasons.push({\n          setting: setting.id,\n          reason: setting.description\n        });\n\n        // Update status (warning > caution > ok)\n        if (status === 'warning') {\n          result.status = 'warning';\n        } else if (status === 'caution' && result.status === 'ok') {\n          result.status = 'caution';\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Analyzes an ingredient list and returns the results\n   */\n  analyze(ingredientList: string): AnalysisResult {\n    // Handle invalid input\n    if (!ingredientList || typeof ingredientList !== 'string') {\n      return this.createEmptyResult('');\n    }\n\n    const result = this.createEmptyResult(ingredientList);\n\n    // Normalize the ingredient list\n    const normalized = normalizer(ingredientList);\n    if (!normalized.isValid) {\n      return result;\n    }\n\n    // Analyze each ingredient\n    result.ingredients = normalized.ingredients.map((normalizedName: string) => {\n      return this.analyzeIngredient(normalizedName, normalizedName);\n    });\n\n    // Determine overall status and reasons\n    result.status = 'ok';\n    const uniqueReasons = new Map<string, StatusReason>();\n\n    for (const ingredient of result.ingredients) {\n      // Update overall status (warning > caution > ok)\n      if (ingredient.status === 'warning') {\n        result.status = 'warning';\n      } else if (ingredient.status === 'caution' && result.status === 'ok') {\n        result.status = 'caution';\n      }\n\n      // Collect unique reasons\n      for (const reason of ingredient.reasons) {\n        const key = `${reason.setting}:${reason.reason}`;\n        if (!uniqueReasons.has(key)) {\n          uniqueReasons.set(key, reason);\n        }\n      }\n    }\n\n    result.reasons = Array.from(uniqueReasons.values());\n    return result;\n  }\n}\n"],"names":["Analyzer","config","__publicField","getBundledDatabase","bundledSystems","getBundledSystems","defaultSystem","findSystemById","getBundledSettings","database","system","input","name","normalized","result","match","findIngredient","settingId","setting","matches","allowedMatch","_a","cat","catId","category","status","ingredientList","normalizer","normalizedName","uniqueReasons","ingredient","reason","key"],"mappings":"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"}